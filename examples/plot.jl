using LinearAlgebra
using LevyProcesses
using ForwardDiff
using MittagLeffler
using NonlinearSolve
using LaTeXStrings
using Plots


const LP = LevyProcesses

# Œº = 2.0
# œÉ = 1.0
# q = 0.0  # usually q > 0, at least q ‚â• 0
# # this does not correspond to a "normal" case
# œïf(Œ∏) = LP.ùüô(Œ∏ > 0) * (Œ∏^2*œÉ^2/2.0 + Œº*Œ∏)
# œÄf(x) = 0.0

# Œº = 2.0
# œÉ = 1.0
# q = 0.0  # usually q > 0, at least q ‚â• 0
# # this correspond to the original case by Ehyter
# œïf(x) = LP.ùüô(x > 0) * exp(-x)
# œÄf(x) = 1.0 - 1.0 / (1.0 + x)
# wq(x) = 2/(‚àö(2*q*œÉ^2+Œº)) * ‚ÑØ^(-Œº*x/œÉ^2) * sinh((x/œÉ^2)*‚àö(2*q*œÉ^2+Œº)) * (x > 0)

# #  this needs that `c-Œª/Œº > 0`
# c = 1.0  # drift
# Œª = 1.0  # rate of arrival
# Œº = 2.0  # exponentially distributed jumps
# # usually q > 0, at least q ‚â• 0. this is where the q of q-scale, and, therefore, the q W(q)
# # comes from
# q = 0.0
# # the characteristic triplet (œÉ, œïf, œÄf)
# œÉ = 0.0
# œïf(Œ∏) = LP.ùüô(Œ∏ > 0) * (c * Œ∏ - Œª * (1 - Œº / (Œº + Œ∏)))
# # œÅ = arg(Œ∏ -> c * Œ∏ - œïf(Œ∏) - q + œÉ^2 * Œ∏^2, 1)
# œÄf(x) = exp(-Œº * x)
# wq(x) = 1 / c * (1 + Œª / (c * Œº - Œª) * (1 - ‚ÑØ^(Œº - c^-1 * Œª) * x))

# # case from Ronnie Loeffen's Stochastic control for spectrally negative Levy processes)
# # ch 4.10, pp 73.
# N = 10
# A‚Çñ = normalize!(rand(N))
# Œ±‚Çñ = 1
# # Œº = 2.0
# # œÉ = 1.0
# # q = 0.0  # usually q > 0, at least q ‚â• 0
# # # this does not correspond to a "normal" case
# # œïf(Œ∏) = LP.ùüô(Œ∏ > 0) * (Œ∏^2*œÉ^2/2.0 + Œº*Œ∏)
# # œÄf(x) = 0.0

# # case from Ronnie Loeffen's Stochastic control for spectrally negative Levy processes)
# # ch 1.6, pp 73.
# Œ± = 1  # > 0
# Œª = 10
# c = Œº = 21.4
# œÉ‚ÇÅ = 1.4
# œÉ‚ÇÇ = 2
# q = 0.1  # usually q > 0, at least q ‚â• 0
# # œà(u) in the tesis
# _œïf(Œ∏) = c*Œ∏ + Œ∏^2*œÉ^2/2.0 + Œª*(Œ±/(Œ∏+Œ±)^2 - 1)
# œïf(Œ∏) = LP.ùüô(Œ∏ > 0) * _œïf(Œ∏)
# œÄf(x) = Œª*Œ±^2*x*exp(-Œ±*x)
#
# f(Œ∏) = (_œïf(Œ∏) - q)*(Œ± + Œ∏)^2
# Œ∏‚±º = solve(NonlinearProblem((u, p) -> f(u), 1))


m = 100


for n in (10, 100, 1000)
    @time œÅ, Œ±·µ®, emp = sim(; c, œÉ, q, œïf, œÄf, m, n)

    x = -0.1:0.1:10
    y = emp.(x)
    Y = @. (œÅ * Œ±·µ® * œÉ^(-2)) / (q * (Œ±·µ® * œÉ^(-2) + œÅ)) * ‚ÑØ^(œÅ * x) * y
    Yw = wq.(x)

    plt = plot(x, y)
    plt2 = plot(x, Y)

    savefig(plt, "emp_known_p$n.png")
    savefig(plt2, "emp_known_$n.png")
end

#  1.969966 seconds (4.90 M allocations: 159.307 MiB, 2.11% gc time)
# 11.379837 seconds (24.47 M allocations: 492.415 MiB, 0.84% gc time)
# 89.011660 seconds (192.06 M allocations: 3.266 GiB, 0.78% gc time)
